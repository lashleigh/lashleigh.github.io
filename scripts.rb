require 'csv'
require 'json'
require 'yaml'
require 'time'

require 'active_support'
require 'active_support/core_ext'

def pbcopy(input)
 str = input.to_s
 IO.popen('pbcopy', 'w') { |f| f << str }
 str
end

# Monkey party patch time
module MyExtension
  module Hash 
    def only(*keys)
      ::Hash[[keys, self.values_at(*keys)].transpose]
    end
  end
end
Hash.include MyExtension::Hash

module Enumerable
  def count_by(&block)
    Hash[group_by(&block).map { |key,vals| [key, vals.size] }]
  end
end

# Correct awkward formatting
# * isbn fields have =ID and get escaped awkwardly
# * time fields aren't iso8061
def clean(blob)
  blob[:isbn].gsub!(/[="]/,'')
  blob[:isbn13].gsub!(/[="]/,'')
  blob[:date_read] = Time.parse(blob[:date_read]).strftime("%F") if blob[:date_read]
  blob[:date_added] = Time.parse(blob[:date_added]).strftime("%F") if blob[:date_added]
  return blob
end

# Build the jekyll formatted files based on date_read
def post_title(blob)
  begin
    title = blob[:date_read] || blob[:date_added]
    title += '-'
    title += blob[:title].split(' ')[0..4].join('-').downcase.gsub(/[:.',()#?]/,'')
	rescue => e
		puts [blob[:date_read], blob[:title]]
	end
end

def post_yaml(blob)
    {
      date: blob[:date_read] || blob[:date_added],
      title: blob[:title],
      author: blob[:author],
      goodreads_book_id: blob[:book_id],
    }.stringify_keys.to_yaml
end

def write_post_scaffold_file(book, where = '_drafts/autogenerated')
  f = File.open("./#{where}/#{post_title(book)}.md", "w")
  f.puts(post_yaml(book))
  f.puts("\n---")
  f.puts(book[:my_review].gsub("<br/>", "\n")) if book[:my_review]
  f.close
end

# Instead of modifying the posts over and over again (which would clearly drive me crazy)
# I should just import the goodreads metadata separately. Then the only thing I need to
# put in the front matter of my post is the goodreads book_id.
def write_goodreads_book_data(books, file = "./_data/goodreads/books.yaml")
  ignored_fields = [:my_review, :author_lf, :my_rating, :average_rating, :owned_copies]
  massaged_data = books.map {|r| {r[:book_id] => r.reject {|k, v| v.nil? || ignored_fields.include?(k)}.stringify_keys} }
  f = File.open(file, 'w')
  f.puts(massaged_data.to_yaml)
  f.close
end

def read_book_data_and_convert_to_json(file = "./_data/goodreads_library_export_1.csv")
  res = CSV.read(file, :headers => true, :header_converters => :symbol, :converters => :all);
  res.map {|r| clean(r.to_hash) };
end

def write_draft_posts(books)
  books.select {|r| r[:my_review]}.each {|r| write_post_scaffold_file(r)}
end
